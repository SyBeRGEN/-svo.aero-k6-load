// logger.js
export function logFlights(json, startStr, endsStr) {
    let flights = {};

    console.log('üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–π—Å—ã:');
    console.log(`   ‚û§ –°: ${startStr}`);
    console.log(`   ‚û§ –ü–æ: ${endsStr}`);

    for (const item of json.items) {
        const flight = item.flt || 'NO_FLIGHT';
        const from = item.mar1?.city || 'NO_FROM';
        const to = item.mar2?.city || 'NO_TO';
        const status = item.status_id || 'NO_STATUS';
        const checkin = item.estimated_chin_start || 'NO_TIME';

        if (!flights[flight]) {
            flights[flight] = {
                from,
                to,
                status,
                times: [],
            };
        }

        flights[flight].times.push(checkin);
    }

    for (const [flight, data] of Object.entries(flights)) {
        const timesSorted = data.times.filter(t => t !== 'NO_TIME').sort();
        const firstTime = timesSorted[0] || 'NO_TIME';
        const lastTime = timesSorted[timesSorted.length - 1] || 'NO_TIME';

        const line = `–ò–∑: ${data.from} ‚Üí –í: ${data.to} | –†–µ–π—Å: ${flight} | –°—Ç–∞—Ç—É—Å: ${data.status} | –í—Ä–µ–º–µ–Ω–∞ —á–µ–∫–∏–Ω–∏–∑–∞—Ü–∏–π: ${data.times.length} (${firstTime} ‚Üí ${lastTime})`;
        console.log(line);
    }
}

export function logCity(json) {
    let flights = {};

    console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Å–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É');

    if (!json || !Array.isArray(json.items)) {
        console.warn('‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
        console.log(JSON.stringify(json, null, 2));
        return;
    }

    for (const item of json.items) {
        const flight = item.flt || 'NO_FLIGHT';
        const from = item.mar1?.city || 'NO_FROM';
        const to = item.mar2?.city || 'NO_TO';
        const status = item.status_id || 'NO_STATUS';
        const checkin = item.estimated_chin_start || 'NO_TIME';

        if (!flights[flight]) {
            flights[flight] = {
                from,
                to,
                status,
                times: [],
            };
        }

        flights[flight].times.push(checkin);
    }

    function extracted(timesSorted) {
        const lastTime = timesSorted[timesSorted.length - 1] || 'NO_TIME';
        return lastTime;
    }

    for (const [flight, data] of Object.entries(flights)) {
        const timesSorted = data.times.filter(t => t !== 'NO_TIME').sort();
        const firstTime = timesSorted[0] || 'NO_TIME';
        const lastTime = extracted(timesSorted);

        const line = `–ò–∑: ${data.from} ‚Üí –í: ${data.to} | –†–µ–π—Å: ${flight} | –°—Ç–∞—Ç—É—Å: ${data.status} | –í—Ä–µ–º–µ–Ω–∞ —á–µ–∫–∏–Ω–∏–∑–∞—Ü–∏–π: ${data.times.length} (${firstTime} ‚Üí ${lastTime})`;
        console.log(line);
    }
}